### Step 12: Analyze Flow - API Service + In-Memory Store + IMPROVED ERROR MESSAGES
### Testing the frontend's API service integration and centralized state management with specific error handling

### WHAT'S NEW IN STEP 12:
# - Created dedicated ApiService for backend communication with proper error handling
# - Implemented centralized StateService for analysis payload and UI state management
# - Enhanced Explorer component to use reactive state management with RxJS observables
# - Added comprehensive error handling for all six standard error codes with exact message format
# - Implemented visible "Analyzing..." loading state during requests
# - Added proper error display with dismissible alerts and user-friendly messages
# - Refactored component to use dependency injection and reactive programming patterns
# - **IMPROVED**: Much more specific error messages that detect repository types and provide actionable feedback

### Key Differences to Look For:
# 1. **Centralized State Management**: All analysis data and UI state now managed in StateService
# 2. **Reactive Updates**: Component subscribes to state changes using RxJS observables
# 3. **Enhanced Error Handling**: Standardized error processing with user-friendly display messages
# 4. **Loading States**: Proper "Analyzing..." feedback with spinner during API calls
# 5. **Service Architecture**: Clean separation between API communication and state management
# 6. **Error Display**: Dismissible error alerts with Material Icons and proper styling
# 7. **SPECIFIC ERROR MESSAGES**: Repository type detection and detailed clone failure reasons

### Backend Tests (Verify API functionality with improved error messages)

### Test 1: Valid Repository Analysis
POST http://localhost:5000/analyze
Content-Type: application/json

{
  "repoUrl": "https://github.com/nunit/nunit.git"
}

### Expected Result:
# - HTTP 200 OK
# - Complete analysis payload with meta, graphs, metrics, cycles
# - Frontend should show "Analyzing..." then success with node/edge counts
# - State should be properly updated in StateService

### Test 2: Invalid Repository (CloneFailed) - IMPROVED ERROR MESSAGE
POST http://localhost:5000/analyze
Content-Type: application/json

{
  "repoUrl": "https://github.com/nonexistent/invalid-repo.git"
}

### Expected Result:
# - HTTP 502 Bad Gateway
# - BEFORE: {"code": "CloneFailed", "message": "Could not clone the repository. Ensure the URL is public and reachable."}
# - AFTER: {"code": "CloneFailed", "message": "Repository 'https://github.com/nonexistent/invalid-repo.git' does not exist or is not publicly accessible."}
# - Frontend should display: "Clone Failed: Repository 'https://github.com/nonexistent/invalid-repo.git' does not exist or is not publicly accessible."
# - Error should be dismissible with close button

### Test 3: TypeScript Repository (NoSolutionOrProject) - MUCH MORE SPECIFIC
POST http://localhost:5000/analyze
Content-Type: application/json

{
  "repoUrl": "https://github.com/microsoft/TypeScript.git"
}

### Expected Result:
# - HTTP 400 Bad Request
# - BEFORE: {"code": "NoSolutionOrProject", "message": "No `.sln` or `.csproj` found in the repository. Provide a C# solution/project repo or specify a path to the `.sln`."}
# - AFTER: {"code": "NoSolutionOrProject", "message": "This appears to be a TypeScript/JavaScript repository (found package.json, tsconfig.json, or .js/.ts files). CodeAtlas only analyzes C# repositories with .sln or .csproj files."}
# - Frontend should display: "Repository Error: This appears to be a TypeScript/JavaScript repository..."

### Test 4: Python Repository - SPECIFIC DETECTION
POST http://localhost:5000/analyze
Content-Type: application/json

{
  "repoUrl": "https://github.com/python/cpython.git"
}

### Expected Result:
# - HTTP 400 Bad Request
# - {"code": "NoSolutionOrProject", "message": "This appears to be a Python repository (found .py files or requirements.txt). CodeAtlas only analyzes C# repositories with .sln or .csproj files."}

### Test 5: Large Repository (LimitsExceeded)
POST http://localhost:5000/analyze
Content-Type: application/json

{
  "repoUrl": "https://github.com/dotnet/runtime.git"
}

### Expected Result (if over limits):
# - HTTP 413 Payload Too Large
# - Error response: {"code": "LimitsExceeded", "message": "Repository contains X C# files, exceeding the limit of 100,000 files"}
# - Frontend should display: "Size Limit Exceeded: Repository contains X C# files, exceeding the limit of 100,000 files"

### Frontend UI Tests (Manual Testing Required)

### Test 6: Frontend Loading States
# Steps:
# 1. Open http://localhost:4200
# 2. Enter valid repo URL: https://github.com/nunit/nunit.git
# 3. Click "Analyze" button
# 
# Expected Behavior:
# - Button text changes to "Analyzing..." immediately
# - Button becomes disabled during request
# - Loading spinner appears in main area with "Analyzing repository..." message
# - "This may take a few minutes for large repositories" helper text visible
# - After completion: Success message with node/edge counts
# - Button returns to "Analyze" and becomes enabled

### Test 7: Specific Error Display and Dismissal
# Steps:
# 1. Enter TypeScript repo: https://github.com/microsoft/TypeScript.git
# 2. Click "Analyze"
# 
# Expected Behavior:
# - Shows loading state initially
# - After failure: Red error alert appears with:
#   - Error icon (Material Icons error symbol)
#   - SPECIFIC message: "Repository Error: This appears to be a TypeScript/JavaScript repository (found package.json, tsconfig.json, or .js/.ts files). CodeAtlas only analyzes C# repositories with .sln or .csproj files."
#   - Dismissible close button (X)
# - Clicking X should clear the error
# - Error should not reappear until next failure

### Test 8: Invalid Repository Error
# Steps:
# 1. Enter invalid URL: https://github.com/invalid/repo.git
# 2. Click "Analyze"
# 
# Expected Behavior:
# - Shows loading state initially
# - After failure: Red error alert with SPECIFIC message:
#   - "Clone Failed: Repository 'https://github.com/invalid/repo.git' does not exist or is not publicly accessible."
# - Much more helpful than the previous generic "Could not clone the repository" message

### Test 9: Scope Toggle and State Management
# Steps:
# 1. Complete successful analysis
# 2. Toggle between "Namespace" and "File" scope buttons
# 
# Expected Behavior:
# - Radio buttons should update properly
# - Node/edge counts should change based on scope
# - State should persist across scope changes
# - No re-analysis required for scope switching

### Test 10: Search State Management
# Steps:
# 1. Complete successful analysis  
# 2. Type in search box: "nunit"
# 
# Expected Behavior:
# - Search term should be stored in StateService
# - Input should reflect current search state
# - Search state should persist across component interactions
# - (Search filtering will be implemented in Step 13)

### Test 11: Save/Load with State Management
# Steps:
# 1. Complete successful analysis
# 2. Click "Save" button
# 3. Refresh page (or reload app)
# 4. Click "Load" and select saved file
# 
# Expected Behavior:
# - Save: Downloads .codeatlas.json file with analysis data
# - After reload: App returns to initial state
# - Load: File picker opens, after selection analysis data restored
# - State should be fully restored including scope, node counts

### Test 12: Network Error Handling
# Steps:
# 1. Stop the backend API server (Ctrl+C in API terminal)
# 2. Try to analyze any repository
# 
# Expected Behavior:
# - Shows loading state initially
# - After timeout: Error alert appears with:
#   - "Connection Error: Unable to connect to the analysis server. Please check your connection and try again."
#   - Proper error styling and dismissible alert
# - Restart API server and retry should work normally

### Test 13: Multiple Repository Types
# Test different repository types to see specific detection:
# 
# Repository Type Detection:
# - TypeScript/JavaScript: package.json, tsconfig.json, .ts/.js files
# - Python: .py files, requirements.txt, setup.py
# - Java: .java files, pom.xml, build.gradle
# - Go: .go files, go.mod, go.sum
# - Rust: .rs files, Cargo.toml
# - C++: .cpp/.h files, CMakeLists.txt, Makefile
# - Documentation: Only .md/.txt files, no code files
# 
# Each should return a specific message explaining what was detected and that CodeAtlas requires C# repositories

### Test 14: State Service Integration
# Verify StateService functionality through browser dev tools:
# 
# Steps:
# 1. Open browser dev tools â†’ Console
# 2. Complete analysis
# 3. Run: `ng.getComponent($0).stateService.currentState`
# 
# Expected State Structure:
# {
#   analysisResult: { meta: {...}, graphs: {...}, metrics: {...}, cycles: [...] },
#   isAnalyzing: false,
#   error: null,
#   ui: {
#     currentScope: 'namespace',
#     selectedNodeId: null,
#     searchTerm: '',
#     activeFilters: [],
#     isNeighborsOnly: false,
#     isImpactMode: false,
#     pathModeSource: null,
#     pathModeTarget: null
#   }
# }

### MAJOR IMPROVEMENTS IN ERROR MESSAGES:

### BEFORE (Generic and Unhelpful):
# CloneFailed: "Could not clone the repository. Ensure the URL is public and reachable."
# NoSolutionOrProject: "No `.sln` or `.csproj` found in the repository. Provide a C# solution/project repo or specify a path to the `.sln`."

### AFTER (Specific and Actionable):
# CloneFailed: "Repository 'https://github.com/nonexistent/invalid-repo.git' does not exist or is not publicly accessible."
# NoSolutionOrProject: "This appears to be a TypeScript/JavaScript repository (found package.json, tsconfig.json, or .js/.ts files). CodeAtlas only analyzes C# repositories with .sln or .csproj files."

### Key Error Message Improvements:
# 1. **Repository Type Detection**: Automatically identifies TypeScript, Python, Java, Go, Rust, C++, documentation repos
# 2. **Specific Clone Failures**: Distinguishes between "not found", "access denied", "timeout", "network" issues  
# 3. **Actionable Feedback**: Tells users exactly what type of repository they tried to analyze
# 4. **URL Context**: Includes the specific repository URL in error messages for clarity
# 5. **Educational**: Explains what CodeAtlas requires and what was actually found
# 6. **Frontend Integration**: Fixed API service to properly parse backend error format (code/message vs error/message)

### Development Notes for Step 12:
# - API service uses RxJS observables for reactive programming
# - State service implements BehaviorSubject for state broadcasting
# - Component properly subscribes/unsubscribes to prevent memory leaks
# - Error handling provides both technical and user-friendly messages
# - All UI state is centralized and ready for graph visualization in Step 13
# - Loading states provide clear feedback during potentially long-running operations
# - Backend now includes repository type detection for much more helpful error messages
# - Frontend properly parses backend error format (fixed code/message mismatch)

### Next Step Preparation:
# Step 13 will add:
# - Cytoscape.js graph canvas integration
# - Node selection with right drawer details
# - Filter tree (namespace/folder hierarchy)
# - Search functionality with node highlighting
# - Neighbors-only mode for focused exploration
# 
# The state management architecture implemented in Step 12 provides the foundation
# for all these interactive features, and the improved error messages will help users
# understand when they're trying to analyze non-C# repositories.